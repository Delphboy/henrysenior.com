#+TITLE: Introduction to Git
#+AUTHOR: Henry Senior
#+OPTIONS: toc:nil
#+INFOJS_OPT: view:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* What is Git?
Git is a version control system developed by Linus Torvalds to help manage the Linux source code. There were lots of developers adding features, removing bugs, and doing other things to Linux and it was hard to keep track of all the changes. It was also difficult to see how changes were effecting the code as a whole, making it much harder to roll back to an older version if a bug was discovered. The aim of git was to create a version control system that would allow lots of developers to work on their own section of the code whilst maintaining a version that was bug free and ready to ship.

* What is GitHub?
GitHub is a service built on top of Git that allows developers to collaborate all over the world to solve problems. It’s probably best summed up by this [[https://www.google.com][short video]].

* What you'll need
 * [[https://github.com][A GitHub account]] (GitLab or BitBucket should work equally well but this tutorial is focussed on GitHub)
 * [[https://git-scm.com/downloads][A git terminal]]

* Setting Up Your Git Terminal
First things first, we need to tell git our name and email. This will allow developers to contact one another to ask about code changes if git is being used outside a service like GitHub.

#+BEGIN_SRC bash
$ git config --global user.name "your name here"
$ git config --global user.email "your email here"
#+END_SRC

Git bash utilises the bash commands popular on macOS and Linux. Here are some of the basics:
#+BEGIN_SRC bash
$ ls #list the files in a directory
$ ls -a # list ALL the files in a directory
$ pwd #prints the working directory (you're current directory)
$ touch file-name.txt #creates a file called file name.txt
$ mkdir directory-name #creates a directory called directory-name
$ cd directory-name #changes current directory to directory-name
#+END_SRC

* Creating Repositories on GitHub
A repository, or repo for short, is the place where your code lives. I should emphasis that it is where the code lives, not where other things that go along with a programming project live. Files such as compiler outputs (.class files in Java for example) should be generated by each developer, not stored on a git server. [[https://github.com/github/gitignore/][These kinds of files are excluded automatically by .gitignore files]].

** Making a New Repository
  1. Go to [[https://www.github.com][github.com]]
  2. In the top right corner, press the + button
  3. Select “New Repository”
  4. Give it a name (replace spaces with ‘-’)
  5. Give it a description
  6. Decide whether it will be public or private
  7. Initilise the repo with a README.md file
  8. Add a .gitignore file for the language or IDE you’re using
  9. Add a license (Any of the first three do the job perfectly)

You will now have a pretty empty repository on GitHub

* Basic Git Commands
** Clone
The git clone command will download a repository into a new folder in your current working directory. When on a project’s page there will be a drop down button to get the URL required to clone that specific project. You can use the clone command to download the repository you just made in the previous step. Go to the repository's GitHub page (Github.com/<your-username>/<repository-name>) and press the green "Code" button. This will let you copy a link to the =.git= file.
